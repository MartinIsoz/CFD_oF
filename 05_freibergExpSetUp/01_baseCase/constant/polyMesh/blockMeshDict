/*--------------------------------*- C++ -*----------------------------------*\ 
| ========                 |                                                 | 
| \      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           | 
|  \    /   O peration     | Version:  2.3.0                                 | 
|   \  /    A nd           | Web:      www.OpenFOAM.org                      | 
|    \/     M anipulation  |                                                 | 
\*---------------------------------------------------------------------------*/ 
FoamFile 
{ 
 	 version 	 2.0; 
 	 format 	 ascii; 
 	 class 		 dictionary; 
 	 object 	 blockMeshDict; 
} 
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // 

convertToMeters 	1; 

vertices 
( 
	 ( -0.01 -0.04 -0.01 )	//0
	 ( 0.0 -0.04 -0.01 )	//1
	 ( 0.3 -0.04 -0.01 )	//2
	 ( -0.01 -0.04 0.0 )	//3
	 ( 0.0 -0.04 0.0 )	//4
	 ( 0.3 -0.04 0.0 )	//5
	 ( -0.01 -0.04 0.003 )	//6
	 ( 0.0 -0.04 0.003 )	//7
	 ( 0.3 -0.04 0.003 )	//8
	 ( -0.01 -0.02 -0.01 )	//9
	 ( 0.0 -0.02 -0.01 )	//10
	 ( 0.3 -0.02 -0.01 )	//11
	 ( -0.01 -0.02 0.0 )	//12
	 ( 0.0 -0.02 0.0 )	//13
	 ( 0.3 -0.02 0.0 )	//14
	 ( -0.01 -0.02 0.003 )	//15
	 ( 0.0 -0.02 0.003 )	//16
	 ( 0.3 -0.02 0.003 )	//17
	 ( -0.01 -0.02 -0.01 )	//18
	 ( 0.0 -0.02 -0.01 )	//19
	 ( 0.3 -0.02 -0.01 )	//20
	 ( -0.01 -0.02 0.0 )	//21
	 ( 0.0 -0.02 0.0 )	//22
	 ( 0.3 -0.02 0.0 )	//23
	 ( -0.01 -0.02 0.003 )	//24
	 ( 0.0 -0.02 0.003 )	//25
	 ( 0.3 -0.02 0.003 )	//26
	 ( -0.01 0.0 -0.01 )	//27
	 ( 0.0 0.0 -0.01 )	//28
	 ( 0.3 0.0 -0.01 )	//29
	 ( -0.01 0.0 0.0 )	//30
	 ( 0.0 0.0 0.0 )	//31
	 ( 0.3 0.0 0.0 )	//32
	 ( -0.01 0.0 0.003 )	//33
	 ( 0.0 0.0 0.003 )	//34
	 ( 0.3 0.0 0.003 )	//35
	 ( -0.01 0.02 -0.01 )	//36
	 ( 0.0 0.02 -0.01 )	//37
	 ( 0.3 0.02 -0.01 )	//38
	 ( -0.01 0.02 0.0 )	//39
	 ( 0.0 0.02 0.0 )	//40
	 ( 0.3 0.02 0.0 )	//41
	 ( -0.01 0.02 0.003 )	//42
	 ( 0.0 0.02 0.003 )	//43
	 ( 0.3 0.02 0.003 )	//44
	 ( -0.01 0.02 -0.01 )	//45
	 ( 0.0 0.02 -0.01 )	//46
	 ( 0.3 0.02 -0.01 )	//47
	 ( -0.01 0.02 0.0 )	//48
	 ( 0.0 0.02 0.0 )	//49
	 ( 0.3 0.02 0.0 )	//50
	 ( -0.01 0.02 0.003 )	//51
	 ( 0.0 0.02 0.003 )	//52
	 ( 0.3 0.02 0.003 )	//53
	 ( -0.01 0.04 -0.01 )	//54
	 ( 0.0 0.04 -0.01 )	//55
	 ( 0.3 0.04 -0.01 )	//56
	 ( -0.01 0.04 0.0 )	//57
	 ( 0.0 0.04 0.0 )	//58
	 ( 0.3 0.04 0.0 )	//59
	 ( -0.01 0.04 0.003 )	//60
	 ( 0.0 0.04 0.003 )	//61
	 ( 0.3 0.04 0.003 )	//62
	 ( -0.01 -0.0057735026919 -0.01 )	//63
	 ( -0.01 -0.0057735026919 0.0 )	//64
	 ( -0.01 -0.0057735026919 0.003 )	//65
	 ( -0.01 0.0057735026919 -0.01 )	//66
	 ( -0.01 0.0057735026919 0.0 )	//67
	 ( -0.01 0.0057735026919 0.003 )	//68
	 ( -0.0015 -0.000866025403784 -0.01 )	//69
	 ( -0.0015 -0.000866025403784 0.0 )	//70
	 ( -0.0015 -0.000866025403784 0.003 )	//71
	 ( -0.0015 -0.000866025403784 -0.01 )	//72
	 ( -0.0015 -0.000866025403784 0.0 )	//73
	 ( -0.0015 -0.000866025403784 0.003 )	//74
	 ( -0.0015 0.000866025403784 -0.01 )	//75
	 ( -0.0015 0.000866025403784 0.0 )	//76
	 ( -0.0015 0.000866025403784 0.003 )	//77
	 ( -0.0015 0.000866025403784 -0.01 )	//78
	 ( -0.0015 0.000866025403784 0.0 )	//79
	 ( -0.0015 0.000866025403784 0.003 )	//80
); 

blocks 
( 
	 hex // sparse left top
	 	 ( 3 4 13 12 6 7 16 15 ) 
	 	 ( 10 10 10 ) 	 simpleGrading 	 ( 1.0 1.0 1.0 ) 
	 hex // sparse left cell
	 	 ( 4 5 14 13 7 8 17 16 ) 
	 	 ( 60 10 10 ) 	 simpleGrading 	 ( 1.0 1.0 1.0 ) 
	 hex // sparse right top
	 	 ( 48 49 58 57 51 52 61 60 ) 
	 	 ( 10 10 10 ) 	 simpleGrading 	 ( 1.0 1.0 1.0 ) 
	 hex // sparse right cell
	 	 ( 49 50 59 58 52 53 62 61 ) 
	 	 ( 60 10 10 ) 	 simpleGrading 	 ( 1.0 1.0 1.0 ) 
	 hex // dense left cell
	 	 ( 22 23 32 31 25 26 35 34 ) 
	 	 ( 300 30 20 ) 	 simpleGrading 	 ( 1.0 1.0 1.0 ) 
	 hex // dense right cell
	 	 ( 31 32 41 40 34 35 44 43 ) 
	 	 ( 300 30 20 ) 	 simpleGrading 	 ( 1.0 1.0 1.0 ) 
	 hex // dense left top
	 	 ( 21 22 31 64 24 25 34 65 ) 
	 	 ( 20 30 20 ) 	 simpleGrading 	 ( 1.0 1.0 1.0 ) 
	 hex // dense right top
	 	 ( 67 31 40 39 68 34 43 42 ) 
	 	 ( 20 30 20 ) 	 simpleGrading 	 ( 1.0 1.0 1.0 ) 
	 hex 
	 	 ( 63 69 75 66 64 70 76 67 ) 
	 	 ( 17 10 40 ) 	 simpleGrading 	 ( 1.0 1.0 1.0 ) 
	 hex 
	 	 ( 64 70 76 67 65 71 77 68 ) 
	 	 ( 17 10 20 ) 	 simpleGrading 	 ( 1.0 1.0 1.0 ) 
	 hex 
	 	 ( 72 28 28 78 73 31 31 79 ) 
	 	 ( 3 3 40 ) 	 simpleGrading 	 ( 1.0 1.0 1.0 ) 
	 hex 
	 	 ( 73 31 31 79 74 34 34 80 ) 
	 	 ( 3 3 20 ) 	 simpleGrading 	 ( 1.0 1.0 1.0 ) 
); 

edges 
( 
); 

boundary 
( 
	inlet 
	{ 
	type patch; 
	faces 
 	(
	( 63 69 75 66 ) 
	( 72 28 28 78 ) 
	);
	} 

	outlet 
	{ 
	type patch; 
	faces 
 	(
	( 5 14 17 8 ) 
	( 23 32 35 26 ) 
	( 32 41 44 35 ) 
	( 50 59 62 53 ) 
	);
	} 

	plate 
	{ 
	type wall; 
	faces 
 	(
	( 4 13 14 5 ) 
	( 22 31 32 23 ) 
	( 31 40 41 32 ) 
	( 49 58 59 50 ) 
	( 3 12 13 4 ) 
	( 48 57 58 49 ) 
	( 21 64 31 22 ) 
	( 39 67 31 40 ) 
	);
	} 

	walls 
	{ 
	type wall; 
	faces 
 	(
	( 3 6 15 12 ) 
	( 48 51 60 57 ) 
	( 63 64 67 66 ) 
	( 63 69 70 64 ) 
	( 72 28 31 73 ) 
	( 64 65 68 67 ) 
	( 66 75 76 67 ) 
	( 78 28 31 79 ) 
	( 21 64 65 24 ) 
	( 39 67 68 42 ) 
	( 3 4 7 6 ) 
	( 4 5 8 7 ) 
	( 57 58 61 60 ) 
	( 58 59 62 61 ) 
	);
	} 

	atmosphere 
	{ 
	type patch; 
	faces 
 	(
	( 7 8 17 16 ) 
	( 25 26 35 34 ) 
	( 34 35 44 43 ) 
	( 52 53 62 61 ) 
	( 6 15 16 7 ) 
	( 51 60 61 52 ) 
	( 24 65 34 25 ) 
	( 42 68 34 43 ) 
	( 65 71 77 68 ) 
	( 74 34 34 80 ) 
	);
	} 

	leftSlave 
	{ 
	type patch; 
	faces 
 	(
	( 12 13 16 15 ) 
	( 13 14 17 16 ) 
	);
	} 

	leftMaster 
	{ 
	type patch; 
	faces 
 	(
	( 21 22 25 24 ) 
	( 22 23 26 25 ) 
	);
	} 

	rightSlave 
	{ 
	type patch; 
	faces 
 	(
	( 39 40 43 42 ) 
	( 40 41 44 43 ) 
	);
	} 

	rightMaster 
	{ 
	type patch; 
	faces 
 	(
	( 48 49 52 51 ) 
	( 49 50 53 52 ) 
	);
	} 

	inletSlave 
	{ 
	type patch; 
	faces 
 	(
	( 69 75 76 70 ) 
	( 70 76 77 71 ) 
	);
	} 

	inletMaster 
	{ 
	type patch; 
	faces 
 	(
	( 72 78 79 73 ) 
	( 73 79 80 74 ) 
	);
	} 

	overInletMaster 
	{ 
	type patch; 
	faces 
 	(
	( 64 70 71 65 ) 
	( 73 31 34 74 ) 
	( 67 76 77 68 ) 
	( 79 31 34 80 ) 
	);
	} 

	overInletSlave 
	{ 
	type patch; 
	faces 
 	(
	( 64 31 34 65 ) 
	( 67 31 34 68 ) 
	);
	} 

); 

mergePatchPairs 
( 
	 (leftMaster leftSlave) 
	 (rightMaster rightSlave) 
	 (inletMaster inletSlave) 
); 

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * // 

